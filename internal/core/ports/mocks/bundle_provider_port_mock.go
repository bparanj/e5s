// Code generated by mockery. DO NOT EDIT manually.
// Package mocks provides mock implementations for testing.
package mocks

import (
	"context"

	"github.com/stretchr/testify/mock"
	"github.com/sufield/ephemos/internal/core/domain"
	"github.com/sufield/ephemos/internal/core/ports"
)

// MockBundleProviderPort is a mock implementation of BundleProviderPort.
type MockBundleProviderPort struct {
	mock.Mock
}

// Ensure mock implements the interface
var _ ports.BundleProviderPort = (*MockBundleProviderPort)(nil)

// GetTrustBundle mocks the GetTrustBundle method.
func (m *MockBundleProviderPort) GetTrustBundle(ctx context.Context) (*domain.TrustBundle, error) {
	args := m.Called(ctx)

	var r0 *domain.TrustBundle
	if args.Get(0) != nil {
		r0 = args.Get(0).(*domain.TrustBundle)
	}

	return r0, args.Error(1)
}

// GetTrustBundleForDomain mocks the GetTrustBundleForDomain method.
func (m *MockBundleProviderPort) GetTrustBundleForDomain(ctx context.Context, trustDomain domain.TrustDomain) (*domain.TrustBundle, error) {
	args := m.Called(ctx, trustDomain)

	var r0 *domain.TrustBundle
	if args.Get(0) != nil {
		r0 = args.Get(0).(*domain.TrustBundle)
	}

	return r0, args.Error(1)
}

// RefreshTrustBundle mocks the RefreshTrustBundle method.
func (m *MockBundleProviderPort) RefreshTrustBundle(ctx context.Context) error {
	args := m.Called(ctx)
	return args.Error(0)
}

// WatchTrustBundleChanges mocks the WatchTrustBundleChanges method.
func (m *MockBundleProviderPort) WatchTrustBundleChanges(ctx context.Context) (<-chan *domain.TrustBundle, error) {
	args := m.Called(ctx)

	var r0 <-chan *domain.TrustBundle
	if args.Get(0) != nil {
		r0 = args.Get(0).(<-chan *domain.TrustBundle)
	}

	return r0, args.Error(1)
}

// ValidateCertificateAgainstBundle mocks the ValidateCertificateAgainstBundle method.
func (m *MockBundleProviderPort) ValidateCertificateAgainstBundle(ctx context.Context, cert *domain.Certificate) error {
	args := m.Called(ctx, cert)
	return args.Error(0)
}

// Close mocks the Close method.
func (m *MockBundleProviderPort) Close() error {
	args := m.Called()
	return args.Error(0)
}

// NewMockBundleProviderPort creates a new mock instance.
func NewMockBundleProviderPort() *MockBundleProviderPort {
	return &MockBundleProviderPort{}
}
